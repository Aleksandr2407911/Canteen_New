from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup, Message,
                            KeyboardButton, ReplyKeyboardMarkup, CallbackQuery)
import xlsx_parse
import push_pull_to_DB
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
button_1 = KeyboardButton(text='–ú–µ–Ω—é üç≤')
button_2 = KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üß∫')
button_3 = KeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã üïê')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
Keyboard = ReplyKeyboardMarkup(keyboard=[[button_1], [button_2], [button_3]], resize_keyboard= True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î)
def compose_dc_for_categories():
    list_for_dc = push_pull_to_DB.fetch_data_from_table('categories')
    dc_for_categories = {}
    
    for i in list_for_dc:
        dc_for_categories[f"category_{i['category']}"] = i['category']

    return dc_for_categories


def compose_dc_products_in_exact_category(category_name):
    list_for_dc = push_pull_to_DB.fetch_productlist_based_on_category(category_name)
    dc_for_products = {}
    
    for i in list_for_dc:
        dc_for_products[f"product_{i['name']}"] = i['name']
        
    return dc_for_products


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ç–∞—â–µ–Ω–Ω–æ–π –∏–∑ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def build_inline_keyboard(buttons):
    keyboard_list = InlineKeyboardBuilder()
    for callback, text in buttons.items():
        keyboard_list.add(InlineKeyboardButton(text=text, callback_data=callback))
    return keyboard_list.adjust(2).as_markup()
    

"""
–≠–¢–û –¢–û –ß–¢–û –°–ê–ù–Ø –î–ï–õ–ê–õ

#–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
list_buttons = []
for i in xlsx_parse.take_categories(xlsx_parse.find_daily_menu):
    button = [InlineKeyboardButton(text=i, callback_data=i)] # –ù–ï–û–ë–•–û–î–ò–ú–û –ü–û–ú–ï–ù–Ø–¢–¨ CALBACK_DATA, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    list_buttons.append(button)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é
keyboard_categories = InlineKeyboardMarkup(inline_keyboard=list_buttons)
"""

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '/start'
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text='Hi', reply_markup=Keyboard)

""" 
#—ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é üç≤
@router.message(F.text == '–ú–µ–Ω—é üç≤')
async def process_menu_command(message: Message):
    await message.answer(text='–ú–µ–Ω—é üç≤', reply_markup= await build_inline_keyboard(compose_dc_for_categories()))
""" 


@router.message(F.text == '–ú–µ–Ω—é üç≤')
async def process_menu_command(message: Message):
    temp = compose_dc_products_in_exact_category('–ì–æ—Ä—è—á–µ–µ')
    keyboard = await build_inline_keyboard(temp)
    await message.answer(text='–ú–µ–Ω—é üç≤', reply_markup=keyboard)
""" 
    

#—Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ category
@router.callback_query(lambda callback: callback.data.startswith('category_'))
async def get_back_from_category(callback: CallbackQuery):
    temp = compose_dc_for_categories()
    callback_data = temp[callback.data]
    await callback.message.answer(text= callback_data, reply_markup= await build_inline_keyboard(compose_dc_products_in_exact_category(callback_data)))
""" 

#@router.callback_query(lambda callback: callback.data.startswith('product_'))
#async def get_back_data_aboutproduct(callback: CallbackQuery):
